// Code generated by goyacc - DO NOT EDIT.

package configparser

import __yyfmt__ "fmt"

import (
	"fmt"
	"time"

	"github.com/PlakarKorp/plakar/scheduler"
)

func Parser(lexer yyLexer) *ConfigParser {
	return lexer.(*ConfigParser)
}

type yySymType struct {
	yys       int
	b         bool
	s         string
	i         int64
	task      scheduler.Task
	schedule  scheduler.Schedule
	schedules []scheduler.Schedule
	times     []scheduler.Time
	strings   []string
	size      float64
	duration  time.Duration
	time      scheduler.Time
	datemask  scheduler.DateMask
	month     time.Month
	err       error
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57384
	yyEofCode   = 57344
	AND         = 57368
	AT          = 57370
	BACKUP      = 57349
	BEFORE      = 57361
	CATEGORY    = 57355
	CHECK       = 57350
	DAY         = 57369
	DURATION    = 57378
	ENVIRONMENT = 57356
	ERROR       = 57376
	EVERY       = 57371
	EXCLUDE     = 57363
	FROM        = 57365
	INTEGER     = 57373
	JOB         = 57358
	LATEST      = 57360
	MAINTENANCE = 57353
	MONTH       = 57381
	NAME        = 57354
	OFF         = 57348
	ON          = 57347
	PERIMETER   = 57357
	REFERENCE   = 57375
	REPORTING   = 57346
	RESTORE     = 57351
	RETENTION   = 57364
	SINCE       = 57362
	SIZE        = 57377
	STRING      = 57374
	SYNC        = 57352
	TAG         = 57359
	TIME        = 57379
	TO          = 57366
	UNTIL       = 57372
	WEEKDAY     = 57380
	WITH        = 57367
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -56
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57370: 0,  // AT (41x)
		57371: 1,  // EVERY (41x)
		57344: 2,  // $end (26x)
		57358: 3,  // JOB (26x)
		57346: 4,  // REPORTING (26x)
		57364: 5,  // RETENTION (17x)
		57374: 6,  // STRING (15x)
		57347: 7,  // ON (13x)
		57363: 8,  // EXCLUDE (12x)
		57359: 9,  // TAG (12x)
		44:    10, // ',' (11x)
		57375: 11, // REFERENCE (11x)
		57366: 12, // TO (7x)
		57397: 13, // repository (6x)
		57365: 14, // FROM (5x)
		57372: 15, // UNTIL (5x)
		57379: 16, // TIME (4x)
		57408: 17, // time (4x)
		57378: 18, // DURATION (3x)
		57388: 19, // duration (3x)
		57367: 20, // WITH (3x)
		57398: 21, // schedule (2x)
		57401: 22, // schedule_time (2x)
		57380: 23, // WEEKDAY (2x)
		57411: 24, // weekday (2x)
		57382: 25, // $@1 (1x)
		57383: 26, // $@2 (1x)
		57349: 27, // BACKUP (1x)
		57385: 28, // backup_opt (1x)
		57386: 29, // backup_opts (1x)
		57350: 30, // CHECK (1x)
		57387: 31, // destination (1x)
		57389: 32, // from_time (1x)
		57390: 33, // grammar (1x)
		57391: 34, // job (1x)
		57353: 35, // MAINTENANCE (1x)
		57392: 36, // maintenance_opt (1x)
		57393: 37, // maintenance_opts (1x)
		57348: 38, // OFF (1x)
		57395: 39, // on_off (1x)
		57396: 40, // reporting (1x)
		57351: 41, // RESTORE (1x)
		57399: 42, // schedule_days (1x)
		57400: 43, // schedule_list (1x)
		57403: 44, // source (1x)
		57405: 45, // string_list (1x)
		57352: 46, // SYNC (1x)
		57406: 47, // sync_direction (1x)
		57407: 48, // task (1x)
		57409: 49, // time_list (1x)
		57410: 50, // until_time (1x)
		57412: 51, // weekday_list (1x)
		57384: 52, // $default (0x)
		57368: 53, // AND (0x)
		57361: 54, // BEFORE (0x)
		57355: 55, // CATEGORY (0x)
		57369: 56, // DAY (0x)
		57356: 57, // ENVIRONMENT (0x)
		57376: 58, // ERROR (0x)
		57345: 59, // error (0x)
		57373: 60, // INTEGER (0x)
		57360: 61, // LATEST (0x)
		57394: 62, // month (0x)
		57381: 63, // MONTH (0x)
		57354: 64, // NAME (0x)
		57357: 65, // PERIMETER (0x)
		57362: 66, // SINCE (0x)
		57402: 67, // size (0x)
		57377: 68, // SIZE (0x)
		57404: 69, // source_list (0x)
	}

	yySymNames = []string{
		"AT",
		"EVERY",
		"$end",
		"JOB",
		"REPORTING",
		"RETENTION",
		"STRING",
		"ON",
		"EXCLUDE",
		"TAG",
		"','",
		"REFERENCE",
		"TO",
		"repository",
		"FROM",
		"UNTIL",
		"TIME",
		"time",
		"DURATION",
		"duration",
		"WITH",
		"schedule",
		"schedule_time",
		"WEEKDAY",
		"weekday",
		"$@1",
		"$@2",
		"BACKUP",
		"backup_opt",
		"backup_opts",
		"CHECK",
		"destination",
		"from_time",
		"grammar",
		"job",
		"MAINTENANCE",
		"maintenance_opt",
		"maintenance_opts",
		"OFF",
		"on_off",
		"reporting",
		"RESTORE",
		"schedule_days",
		"schedule_list",
		"source",
		"string_list",
		"SYNC",
		"sync_direction",
		"task",
		"time_list",
		"until_time",
		"weekday_list",
		"$default",
		"AND",
		"BEFORE",
		"CATEGORY",
		"DAY",
		"ENVIRONMENT",
		"ERROR",
		"error",
		"INTEGER",
		"LATEST",
		"month",
		"MONTH",
		"NAME",
		"PERIMETER",
		"SINCE",
		"size",
		"SIZE",
		"source_list",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {33, 0},
		2:  {33, 2},
		3:  {33, 2},
		4:  {40, 2},
		5:  {34, 4},
		6:  {25, 0},
		7:  {48, 6},
		8:  {48, 2},
		9:  {26, 0},
		10: {48, 5},
		11: {48, 4},
		12: {48, 4},
		13: {44, 1},
		14: {44, 1},
		15: {69, 1},
		16: {69, 2},
		17: {31, 1},
		18: {31, 1},
		19: {13, 1},
		20: {13, 1},
		21: {29, 0},
		22: {29, 2},
		23: {28, 2},
		24: {28, 2},
		25: {28, 2},
		26: {37, 0},
		27: {37, 2},
		28: {36, 2},
		29: {47, 1},
		30: {47, 1},
		31: {47, 1},
		32: {43, 1},
		33: {43, 2},
		34: {21, 2},
		35: {22, 2},
		36: {22, 4},
		37: {32, 0},
		38: {32, 2},
		39: {50, 0},
		40: {50, 2},
		41: {42, 0},
		42: {42, 2},
		43: {51, 1},
		44: {51, 3},
		45: {49, 1},
		46: {49, 3},
		47: {45, 1},
		48: {45, 3},
		49: {67, 1},
		50: {19, 1},
		51: {17, 1},
		52: {24, 1},
		53: {62, 1},
		54: {39, 1},
		55: {39, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [80][]uint16{
		// 0
		{2: 55, 55, 55, 33: 57},
		{2: 56, 61, 60, 34: 59, 40: 58},
		{2: 54, 54, 54},
		{2: 53, 53, 53},
		{7: 134, 38: 135, 133},
		// 5
		{6: 62},
		{27: 64, 30: 65, 35: 66, 41: 67, 46: 68, 48: 63},
		{111, 112, 21: 109, 110, 43: 108},
		{6: 92, 11: 93, 44: 91},
		{6: 70, 11: 71, 13: 90},
		// 10
		{7: 82},
		{6: 70, 11: 71, 13: 77},
		{6: 70, 11: 71, 13: 69},
		{12: 73, 14: 74, 20: 75, 47: 72},
		{37, 37, 5: 37, 8: 37, 37, 12: 37, 14: 37, 20: 37},
		// 15
		{36, 36, 5: 36, 8: 36, 36, 12: 36, 14: 36, 20: 36},
		{6: 70, 11: 71, 13: 76},
		{6: 27, 11: 27},
		{6: 26, 11: 26},
		{6: 25, 11: 25},
		// 20
		{44, 44},
		{12: 78},
		{6: 80, 11: 81, 31: 79},
		{45, 45},
		{39, 39},
		// 25
		{38, 38},
		{6: 70, 11: 71, 13: 83},
		{47, 47, 5: 47, 26: 84},
		{30, 30, 5: 30, 37: 85},
		{46, 46, 5: 87, 36: 86},
		// 30
		{29, 29, 5: 29},
		{18: 89, 88},
		{28, 28, 5: 28},
		{6, 6, 6, 6, 6, 6, 7: 6, 6, 6, 14: 6, 6},
		{48, 48},
		// 35
		{12: 94},
		{12: 43},
		{12: 42},
		{6: 70, 11: 71, 13: 95},
		{50, 50, 5: 50, 8: 50, 50, 25: 96},
		// 40
		{35, 35, 5: 35, 8: 35, 35, 29: 97},
		{49, 49, 5: 101, 8: 100, 99, 28: 98},
		{34, 34, 5: 34, 8: 34, 34},
		{6: 105, 45: 104},
		{6: 103},
		// 45
		{18: 89, 102},
		{31, 31, 5: 31, 8: 31, 31},
		{32, 32, 5: 32, 8: 32, 32},
		{33, 33, 5: 33, 8: 33, 33, 106},
		{9, 9, 5: 9, 8: 9, 9, 9},
		// 50
		{6: 107},
		{8, 8, 5: 8, 8: 8, 8, 8},
		{111, 112, 51, 51, 51, 21: 132, 110},
		{24, 24, 24, 24, 24},
		{15, 15, 15, 15, 15, 7: 126, 42: 125},
		// 55
		{16: 117, 122, 49: 121},
		{18: 89, 113},
		{19, 19, 19, 19, 19, 7: 19, 14: 115, 19, 32: 114},
		{17, 17, 17, 17, 17, 7: 17, 15: 119, 50: 118},
		{16: 117, 116},
		// 60
		{18, 18, 18, 18, 18, 7: 18, 15: 18},
		{5, 5, 5, 5, 5, 7: 5, 10: 5, 15: 5},
		{20, 20, 20, 20, 20, 7: 20},
		{16: 117, 120},
		{16, 16, 16, 16, 16, 7: 16},
		// 65
		{21, 21, 21, 21, 21, 7: 21, 10: 123},
		{11, 11, 11, 11, 11, 7: 11, 10: 11},
		{16: 117, 124},
		{10, 10, 10, 10, 10, 7: 10, 10: 10},
		{22, 22, 22, 22, 22},
		// 70
		{23: 129, 128, 51: 127},
		{14, 14, 14, 14, 14, 10: 130},
		{13, 13, 13, 13, 13, 10: 13},
		{4, 4, 4, 4, 4, 10: 4},
		{23: 129, 131},
		// 75
		{12, 12, 12, 12, 12, 10: 12},
		{23, 23, 23, 23, 23},
		{2: 52, 52, 52},
		{2: 2, 2, 2},
		{2: 1, 1, 1},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 59

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 4:
		{
			Parser(yylex).reporting = yyS[yypt-0].b
		}
	case 5:
		{
			if Parser(yylex).HasJob(yyS[yypt-2].s) {
				Parser(yylex).Error(fmt.Sprintf("job %q already defined", yyS[yypt-2].s))
				goto ret1
			}
			Parser(yylex).PushJob(yyS[yypt-2].s, yyS[yypt-1].task, yyS[yypt-0].schedules)
		}
	case 6:
		{
			Parser(yylex).MakeBackupTask(yyS[yypt-0].s, yyS[yypt-2].s)
		}
	case 7:
		{
			yyVAL.task = Parser(yylex).currentTask
		}
	case 8:
		{
			yyVAL.task = Parser(yylex).MakeCheckTask(yyS[yypt-0].s)
		}
	case 9:
		{
			Parser(yylex).MakeMaintenanceTask(yyS[yypt-0].s)
		}
	case 10:
		{
			yyVAL.task = Parser(yylex).currentTask
		}
	case 11:
		{
			yyVAL.task = Parser(yylex).MakeRestoreTask(yyS[yypt-2].s, yyS[yypt-0].s)
		}
	case 12:
		{
			yyVAL.task = Parser(yylex).MakeSyncTask(yyS[yypt-2].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 13:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 14:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 15:
		{
			yyVAL.strings = append(make([]string, 0, 5), yyS[yypt-0].s)
		}
	case 16:
		{
			yyVAL.strings = append(yyS[yypt-1].strings, yyS[yypt-0].s)
		}
	case 17:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 18:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 19:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 20:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 23:
		{
			task := Parser(yylex).currentTask.(*scheduler.BackupTask)
			task.Cmd.Tags = yyS[yypt-0].strings
		}
	case 24:
		{
			task := Parser(yylex).currentTask.(*scheduler.BackupTask)
			task.Cmd.Excludes = append(task.Cmd.Excludes, yyS[yypt-0].s)
		}
	case 25:
		{
			task := Parser(yylex).currentTask.(*scheduler.BackupTask)
			task.Retention = yyS[yypt-0].duration
		}
	case 28:
		{
			task := Parser(yylex).currentTask.(*scheduler.MaintenanceTask)
			task.Retention = yyS[yypt-0].duration
		}
	case 29:
		{
			yyVAL.s = "to"
		}
	case 30:
		{
			yyVAL.s = "from"
		}
	case 31:
		{
			yyVAL.s = "with"
		}
	case 32:
		{
			yyVAL.schedules = append(yyVAL.schedules, yyS[yypt-0].schedule)
		}
	case 33:
		{
			yyVAL.schedules = append(yyS[yypt-1].schedules, yyS[yypt-0].schedule)
		}
	case 34:
		{
			yyVAL.schedule = yyS[yypt-1].schedule.WithDateMask(yyS[yypt-0].datemask)
		}
	case 35:
		{
			yyVAL.schedule = Parser(yylex).MakeScheduleAt(yyS[yypt-0].times)
		}
	case 36:
		{
			yyVAL.schedule = Parser(yylex).MakeScheduleEvery(yyS[yypt-2].duration, yyS[yypt-1].time, yyS[yypt-0].time)
		}
	case 37:
		{
			yyVAL.time = scheduler.UndefinedTime
		}
	case 38:
		{
			yyVAL.time = yyS[yypt-0].time
		}
	case 39:
		{
			yyVAL.time = scheduler.UndefinedTime
		}
	case 40:
		{
			yyVAL.time = yyS[yypt-0].time
		}
	case 41:
		{
			yyVAL.datemask = scheduler.EveryDay
		}
	case 42:
		{
			yyVAL.datemask = scheduler.EveryDay.SetWeekdayMask(yyS[yypt-0].datemask)
		}
	case 43:
		{
			yyVAL.datemask = yyS[yypt-0].datemask
		}
	case 44:
		{
			yyVAL.datemask = yyS[yypt-2].datemask | yyS[yypt-0].datemask
		}
	case 45:
		{
			yyVAL.times = append(make([]scheduler.Time, 0, 1), yyS[yypt-0].time)
		}
	case 46:
		{
			yyVAL.times = append(yyS[yypt-2].times, yyS[yypt-0].time)
		}
	case 47:
		{
			yyVAL.strings = append(make([]string, 0, 1), yyS[yypt-0].s)
		}
	case 48:
		{
			yyVAL.strings = append(yyS[yypt-2].strings, yyS[yypt-0].s)
		}
	case 49:
		{
			yyVAL.size = yyS[yypt-0].size
		}
	case 50:
		{
			yyVAL.duration = yyS[yypt-0].duration
		}
	case 51:
		{
			yyVAL.time = yyS[yypt-0].time
		}
	case 52:
		{
			yyVAL.datemask = yyS[yypt-0].datemask
		}
	case 53:
		{
			yyVAL.month = yyS[yypt-0].month
		}
	case 54:
		{
			yyVAL.b = true
		}
	case 55:
		{
			yyVAL.b = false
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
